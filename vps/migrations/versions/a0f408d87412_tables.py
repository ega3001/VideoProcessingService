"""tables

Revision ID: a0f408d87412
Revises: eac09d6e72ee
Create Date: 2023-09-19 19:22:33.586052

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlalchemy_utils

from core.status import StatusEnum

# revision identifiers, used by Alembic.
revision = "a0f408d87412"
down_revision = "eac09d6e72ee"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "languages",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("lang_name", sa.String(), nullable=False),
        sa.Column("api_name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "promocodes",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("code", sa.Integer(), nullable=False),
        sa.Column("expiration", sa.DateTime(), nullable=False),
        sa.Column("value", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "subscriptions",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("duration", postgresql.INTERVAL(), nullable=False),
        sa.Column("type", sa.Integer(), nullable=False),
        sa.Column("status", sqlalchemy_utils.types.choice.ChoiceType(StatusEnum, impl=sa.Integer()), nullable=False),
        sa.Column("price", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "users",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("hashed_password", sa.String(), nullable=False),
        sa.Column("used_sso", sa.Boolean(), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=True),
        sa.Column("status", sqlalchemy_utils.types.choice.ChoiceType(StatusEnum, impl=sa.Integer()), nullable=False),
        sa.Column("balance", sa.Integer(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.Column("last_email_request", sa.DateTime(), nullable=True),
        sa.Column("total_created_prj", sa.Integer(), nullable=False),
        sa.Column("total_created_loc", sa.Integer(), nullable=False),
        sa.Column("total_secs_processed", sa.Integer(), nullable=False),
        sa.Column("total_paid", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_table(
        "interviews",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.Column("message", sa.String(), nullable=False),
        sa.Column("status", sqlalchemy_utils.types.choice.ChoiceType(StatusEnum, impl=sa.Integer()), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "payments",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("stripe_id", sa.Integer(), nullable=False),
        sa.Column("amount", sa.Integer(), nullable=False),
        sa.Column("date", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "projects",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("task_id", sa.String(), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("source_name", sa.String(), nullable=False),
        sa.Column("preview_name", sa.String(), nullable=False),
        sa.Column("duration", sa.Float(), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.Column(
            "parsed_speech_data", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("source_language_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("status", sqlalchemy_utils.types.choice.ChoiceType(StatusEnum, impl=sa.Integer()), nullable=False),
        sa.ForeignKeyConstraint(
            ["source_language_id"],
            ["languages.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_promocodes",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("promocode_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("usage_date", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["promocode_id"],
            ["promocodes.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "localizations",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("project_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("target_language_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("task_id", sa.String(), nullable=True),
        sa.Column("result_name", sa.String(), nullable=True),
        sa.Column("duration", sa.Float(), nullable=True),
        sa.Column(
            "parsed_speech_data", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.Column("status", sqlalchemy_utils.types.choice.ChoiceType(StatusEnum, impl=sa.Integer()), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["projects.id"],
        ),
        sa.ForeignKeyConstraint(
            ["target_language_id"],
            ["languages.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_subscriptions",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("subscription_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("payment_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("valid_until", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["payment_id"],
            ["payments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["subscription_id"],
            ["subscriptions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("user_subscriptions")
    op.drop_table("localizations")
    op.drop_table("user_promocodes")
    op.drop_table("projects")
    op.drop_table("payments")
    op.drop_table("interviews")
    op.drop_table("users")
    op.drop_table("subscriptions")
    op.drop_table("promocodes")
    op.drop_table("languages")
    # ### end Alembic commands ###
